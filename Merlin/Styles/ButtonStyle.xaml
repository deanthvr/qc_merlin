<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:extensionClasses="clr-namespace:Merlin.ExtensionClasses">

  <Style TargetType="Button">
    <Setter Property="Background" Value="{DynamicResource ButtonBackgroundColor}"/>
    <Setter Property="BorderBrush" Value="{DynamicResource ButtonBorderColor}"/>
  </Style>

  
  <!-- To use these styles, make a MerlinButton, put your text in the Content Property, and your image in the ImageSource property.
       You can change the text FontSize by setting the ButtonTextFontSize Property                  -->
  <Style TargetType="{x:Type extensionClasses:MerlinButton}" BasedOn="{StaticResource {x:Type Button}}" >
    <Setter Property="Height" Value="40"/>
    <Setter Property="Width" Value="50"/>
    <Setter Property="ButtonTextFontSize" Value="9"/>
    <Setter Property="ContentTemplate">
      <Setter.Value>
        <DataTemplate>
          <Grid>
            <StackPanel VerticalAlignment="Center">
              <Image Source="{Binding ImageSource, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type extensionClasses:MerlinButton}}}">
                <Image.Style>
                  <Style>
                    <Style.Triggers>
                      <DataTrigger Binding="{Binding IsEnabled, 
                                    RelativeSource={RelativeSource AncestorType=
                                    {x:Type Button}}}" Value="False">
                        <Setter Property="Image.Opacity" Value=".25"></Setter>
                      </DataTrigger>
                    </Style.Triggers>
                    <Setter Property="Image.Height" Value="20"></Setter>
                  </Style>
                </Image.Style>
              </Image>
              <TextBlock Text="{TemplateBinding Content}">
                <TextBlock.Style>
                  <Style>
                    <Style.Triggers>
                      <DataTrigger Binding="{Binding IsEnabled, 
                                    RelativeSource={RelativeSource AncestorType=
                                    {x:Type Button}}}" Value="False">
                        <Setter Property="TextBlock.Opacity" Value=".25"></Setter>
                      </DataTrigger>
                    </Style.Triggers>
                    <Setter Property="TextBlock.FontSize" Value="{Binding ButtonTextFontSize, RelativeSource={RelativeSource FindAncestor, 
                                                                  AncestorType={x:Type extensionClasses:MerlinButton}}}"/>
                    <Setter Property="TextBlock.HorizontalAlignment" Value="Center"/>
                  </Style>
                </TextBlock.Style></TextBlock>
            </StackPanel>
          </Grid>
        </DataTemplate>
      </Setter.Value>
    </Setter>
  </Style>

  <Style x:Key="WideButton" TargetType="{x:Type extensionClasses:MerlinButton}" BasedOn="{StaticResource {x:Type extensionClasses:MerlinButton}}" >
    <Setter Property="Width" Value="60"/>
    <Setter Property="ContentTemplate">
      <Setter.Value>
        <DataTemplate>
          <Grid>
            <StackPanel VerticalAlignment="Center">
              <Image Source="{Binding ImageSource, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type extensionClasses:MerlinButton}}}">
                <Image.Style>
                  <Style>
                    <Style.Triggers>
                      <DataTrigger Binding="{Binding IsEnabled, 
                                    RelativeSource={RelativeSource AncestorType=
                                    {x:Type Button}}}" Value="False">
                        <Setter Property="Image.Opacity" Value=".25"></Setter>
                      </DataTrigger>
                    </Style.Triggers>
                    <Setter Property="Image.Height" Value="20"></Setter>
                  </Style>
                </Image.Style>
              </Image>
              <TextBlock Text="{TemplateBinding Content}">
                <TextBlock.Style>
                  <Style>
                    <Style.Triggers>
                      <DataTrigger Binding="{Binding IsEnabled, 
                                    RelativeSource={RelativeSource AncestorType=
                                    {x:Type Button}}}" Value="False">
                        <Setter Property="TextBlock.Opacity" Value=".25"></Setter>
                      </DataTrigger>
                    </Style.Triggers>
                    <Setter Property="TextBlock.FontSize" Value="{Binding ButtonTextFontSize, RelativeSource={RelativeSource FindAncestor, 
                                                                  AncestorType={x:Type extensionClasses:MerlinButton}}}"/>
                    <Setter Property="TextBlock.HorizontalAlignment" Value="Center"/>
                  </Style>
                </TextBlock.Style></TextBlock>
            </StackPanel>
          </Grid>
        </DataTemplate>
      </Setter.Value>
    </Setter>
  </Style>

  <Style x:Key="LargeButton" TargetType="{x:Type extensionClasses:MerlinButton}" BasedOn="{StaticResource {x:Type extensionClasses:MerlinButton}}" >
    <Setter Property="Height" Value="50"/>
    <Setter Property="Width" Value="75"/>
    <Setter Property="ContentTemplate">
      <Setter.Value>
        <DataTemplate>
          <Grid>
            <StackPanel VerticalAlignment="Center">
              <Image Source="{Binding ImageSource, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type extensionClasses:MerlinButton}}}">
                <Image.Style>
                  <Style>
                    <Style.Triggers>
                      <DataTrigger Binding="{Binding IsEnabled, 
                                    RelativeSource={RelativeSource AncestorType=
                                    {x:Type Button}}}" Value="False">
                        <Setter Property="Image.Opacity" Value=".25"></Setter>
                      </DataTrigger>
                    </Style.Triggers>
                    <Setter Property="Image.Height" Value="30"></Setter>
                  </Style>
                </Image.Style>
              </Image>
              <TextBlock Text="{TemplateBinding Content}">
                <TextBlock.Style>
                  <Style>
                    <Style.Triggers>
                      <DataTrigger Binding="{Binding IsEnabled, 
                                    RelativeSource={RelativeSource AncestorType=
                                    {x:Type Button}}}" Value="False">
                        <Setter Property="TextBlock.Opacity" Value=".25"></Setter>
                      </DataTrigger>
                    </Style.Triggers>
                    <Setter Property="TextBlock.FontSize" Value="{Binding ButtonTextFontSize, RelativeSource={RelativeSource FindAncestor, 
                                                                  AncestorType={x:Type extensionClasses:MerlinButton}}}"/>
                    <Setter Property="TextBlock.HorizontalAlignment" Value="Center"/>
                  </Style>
                </TextBlock.Style></TextBlock>
            </StackPanel>
          </Grid>
        </DataTemplate>
      </Setter.Value>
    </Setter>
  </Style>

  <Style x:Key="NoTextButton" TargetType="{x:Type extensionClasses:MerlinButton}" BasedOn="{StaticResource {x:Type extensionClasses:MerlinButton}}" >
    <Setter Property="Height" Value="28"/>
    <Setter Property="ContentTemplate">
      <Setter.Value>
        <DataTemplate>
          <Grid>
              <Image Source="{Binding ImageSource, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type extensionClasses:MerlinButton}}}">
                <Image.Style>
                  <Style>
                    <Style.Triggers>
                      <DataTrigger Binding="{Binding IsEnabled, 
                                    RelativeSource={RelativeSource AncestorType=
                                    {x:Type Button}}}" Value="False">
                        <Setter Property="Image.Opacity" Value=".25"></Setter>
                      </DataTrigger>
                    </Style.Triggers>
                  </Style>
                </Image.Style>
              </Image>
          </Grid>
        </DataTemplate>
      </Setter.Value>
    </Setter>
  </Style>

  <Style x:Key="NoTextNarrowButton" TargetType="{x:Type extensionClasses:MerlinButton}" BasedOn="{StaticResource {x:Type extensionClasses:MerlinButton}}" >
    <Setter Property="Height" Value="20"/>
    <Setter Property="ContentTemplate">
      <Setter.Value>
        <DataTemplate>
          <Grid>
            <Image Source="{Binding ImageSource, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type extensionClasses:MerlinButton}}}">
              <Image.Style>
                <Style>
                  <Style.Triggers>
                    <DataTrigger Binding="{Binding IsEnabled, 
                                    RelativeSource={RelativeSource AncestorType=
                                    {x:Type Button}}}" Value="False">
                      <Setter Property="Image.Opacity" Value=".25"></Setter>
                    </DataTrigger>
                  </Style.Triggers>
                </Style>
              </Image.Style>
            </Image>
          </Grid>
        </DataTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  
  <Style x:Key="BrowseButton" TargetType="{x:Type extensionClasses:MerlinButton}" BasedOn="{StaticResource {x:Type extensionClasses:MerlinButton}}" >
    <Setter Property="Height" Value="16"/>
    <Setter Property="Width" Value="16"/>
    <Setter Property="ContentTemplate">
      <Setter.Value>
        <DataTemplate>
          <Grid>
            <Image Source="{Binding ImageSource, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type extensionClasses:MerlinButton}}}">
              <Image.Style>
                <Style>
                  <Style.Triggers>
                    <DataTrigger Binding="{Binding IsEnabled, 
                                    RelativeSource={RelativeSource AncestorType=
                                    {x:Type Button}}}" Value="False">
                      <Setter Property="Image.Opacity" Value=".25"></Setter>
                    </DataTrigger>
                  </Style.Triggers>
                </Style>
              </Image.Style>
            </Image>
          </Grid>
        </DataTemplate>
      </Setter.Value>
    </Setter>
  </Style>


</ResourceDictionary>